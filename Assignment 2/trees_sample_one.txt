# [Trees - Ex1] Exercise: Printing a tree
# Implement a method called print() to print the values of the data in all the TreeNodes in
# a Tree above. For example, running print() on the Tree above should produce one of the three values below:
# 1 7 17 6 3
# 7 1 6 17 3
# 7 6 3 17 1 
from cgi import test
from hashlib import new
from operator import ne

#   A general tree
class Treenode:
    def __init__(self, value):
        self.value = value
        self.children = []
    
    def add_child(self, child_node):
        # adds a child to the parent node
        self.children.append(child_node)
        # print(self.children)

    def print(self):
        # prints the hierarchical structure of the tree
        tree_nodes = [self]
        new_val = ""
        while len(tree_nodes) > 0:
            current_node = tree_nodes.pop()
            print(current_node.children)
            tree_nodes +=current_node.children
    
    def printLevelByLevel(self):
        """Implement a method called printLevelByLevel() for the class OrganizationStructure that prints it level 
        by level. For example, running printLevelByLevel() on the OrganizationStructure above should produce the 
        following output:
        """
        # Level order traversal level by level which utilizes 2 queues takes O(n) time cos the traversing of 
        # the tree nodews only happens once and 
        # O(n) space worst case for the queuees
        # 1 queue and a delimeteer set to null which tells you you're starting a new ;ine
class Trees:
    def __init__(self, parent):
        self.parent = Treenode(parent)

    def add_children(self, node):
        new_node = self.parent
        new_node.children.append(node)
    
    def add_parent(self, parent_node):
        new_parent = Treenode(parent_node)
        new_parent.add_child(1)
    
    def print(self):
        print_node = self.parent
        print(print_node.value)
        for i in (print_node.children):
            print(i)
    
    def print_by_level(self):
        """Implement a method called printLevelByLevel() for the class OrganizationStructure that prints it level 
        by level. For example, running printLevelByLevel() on the OrganizationStructure above should produce the 
        following output:
        """
        if(self.parent == None):
            return
        else:
            return
        # Level order traversal levl by level which utilizes 2 queues takes O(n) time cos the traversing of the tree nodews only happens once and 
        # O(n) space worst case for the queuees
        # 1 queue and a delimeteer set to null which tells you you're starting a new ;ine
    
    def printNumLevel(self):
        """Implement a method called for the class OrganizationStructure that prints 
        the number of levels in it. For example, running printNumLevels() on the 
        OrganizationStructure above should print 5. Running printNumLevels() on the 
        OrganizationStructure below should print 4.
        """
        new_tree = self.parent
        while new_tree:
            return
            # Base Case
        if self is None:
            return

        # Create an empty queue
        # for level order traversal
        queue = []

        # Enqueue the root of the tree to initialize the tree
        queue.append(self)

        while(len(queue) > 0):

            # Print front of queue and
            # remove it from queue
            temp_node_data = queue.pop(0)
            print(temp_node_data.data, end  = " ")
            # set the node to the element in the queue for traversal
            node = queue.pop(0)
            # Enqueue left child if it's not none
            if node.left is not None:
                queue.append(node.left)

            # Enqueue right child if it's none
            if node.right is not None:
                queue.append(node.right)
            # whenever the count > 0, it will break out of the while loop





